/*
 * Ranking with the positives and negatives words in
 * the .txt files
 */

package classification;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import com.opencsv.CSVReader;

public class KeywordMethod {


	public static int getClassePosNeg(String tweet) {
		int pos = nbPosWords(tweet); //number of positive words in the tweet
		int neg = nbNegWords(tweet); //number of negative words in the tweet

		int result = pos - neg;

		if (result > 0) 
			return 4;
		else if (result < 0)
			return 0;
		else 
			return 2;
	}


	private static int nbPosWords(String tweet) {
		int pos = 0;
		String fileName = "";
		try {
			fileName = new java.io.File(".").getCanonicalPath()
					+ "/tweets/positive.txt";
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		CSVReader reader = null;
		String [] nextLine;
		String [] words;

		try {
			reader = new CSVReader(new FileReader(fileName), ',');

			try {
				while ((nextLine = reader.readNext()) != null) {
					System.out.println(nextLine);
				}				
			} catch (NumberFormatException | IOException e) {
				System.out.println("keyWord:nbPos:exc1");
				System.out.println(e.getMessage());
			}
		}
		catch (FileNotFoundException e) {
			System.out.println("keyWord:nbPos:FileNotFound");
			System.out.println(e.getMessage());
		}
		return -1;

		/*try {
			String fileName = new java.io.File(".").getCanonicalPath()
					+ "/tweets/positive.txt";
			System.out.print("1");
			InputStream ips = new FileInputStream(fileName);
			System.out.print("2");
			InputStreamReader ipsr = new InputStreamReader(ips);
			System.out.print("3");
			BufferedReader br = new BufferedReader(ipsr);
			System.out.print("4");
			String ligne;
			String[] mots = null;

			while ((ligne = br.readLine()) != null) {
				mots = ligne.split(", ");

				for (String mot : mots) {

					if (tweet.contains(mot)) {
						pos++;
					}
				}
			}
			ips.close();
			br.close();
			ipsr.close();
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		return pos;*/
	}

	/**
	 * Calcule le nombre de mots négatifs d'un tweet
	 *
	 * @param tweet
	 *            le tweet à tester
	 * @return le nombre de mots négatifs de ce tweet
	 */
	private static int nbNegWords(String tweet) {
		int neg = 0;


		CSVReader reader = null;
		String [] nextLine;
		String [] words;

		try {
			reader = new CSVReader(new FileReader("/tweets/negative.txt"), ',');

			try {
				while ((nextLine = reader.readNext()) != null) {
					System.out.println(nextLine);
				}				
			} catch (NumberFormatException | IOException e) {
				System.out.println("keyWord:nbPos:exc1");
				System.out.println(e.getMessage());
			}
		}
		catch (FileNotFoundException e) {
			System.out.println("keyWord:nbPos:FileNotFound");
			System.out.println(e.getMessage());
		}
		return -1;
		
		/*try {
			String fileName = new java.io.File(".").getCanonicalPath()
					+ "/tweets/negative.txt";
			InputStream ips = new FileInputStream(fileName);
			InputStreamReader ipsr = new InputStreamReader(ips);
			BufferedReader br = new BufferedReader(ipsr);
			String ligne;
			String[] mots = null;

			while ((ligne = br.readLine()) != null) {
				mots = ligne.split(", ");
				for (String mot : mots) {
					if (tweet.contains(mot)) {
						neg++;
					}
				}
				ips.close();
				br.close();
				ipsr.close();
			}
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		return neg;*/
	}

}
